---
sudo: required
dist: bionic

notifications:
  slack:
    on_failure: always

#https://istio.io/docs/setup/platform-setup/gardener/
#https://github.com/gardener/gardener/blob/master/docs/development/local_setup.md
fleet_script_gardener_macos_tasks : &fleet_script_gardener_macos_tasks #If you are running minikube within a VM, consider using --driver=none
      script:
        # Install kind via brew
        - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"  #Install brew
        - brew install kubernetes-cli #Installing kubectl and helm
        - brew install kubernetes-helm
        - brew install git #Installing git
        - brew install openvpn #Installing openvpn
        - export PATH=$(brew --prefix openvpn)/sbin:$PATH
        #Alternatively, you can also install Docker for Desktop and kind.
        #Installing Minikube
        - brew install minikube #https://minikube.sigs.k8s.io/docs/start/
        - which minikube
        #Alternatively,Installing Minikube
        # - curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
        # - sudo install minikube-darwin-amd64 /usr/local/bin/minikube
        # - which minikube
        # - brew cask remove minikube #If which minikube fails after installation via brew, you may have to remove the minikube cask and link the binary
        # - brew link minikube
        - brew install iproute2mac #Installing iproute2
        - go get -u github.com/bronze1man/yaml2json #Installing yaml2json and jq
        - brew install jq
        # - brew install coreutils gnu-sed #Install GNU core utilities,Error: coreutils 8.31 is already installed
        #Local Gardener setup
        - git clone git@github.com:gardener/gardener.git && cd gardener
        # Using the nodeless cluster setup,Setting up a local nodeless Garden cluster is quite simple
        # The only prerequisite is a running docker daemon. Just use the provided Makefile rules to start your local Garden
        - make local-garden-up #start all minimally required components of a Kubernetes cluster (etcd, kube-apiserver, kube-controller-manager) and an etcd Instance for the gardener-apiserver as Docker containers
        - make local-garden-down #tear down the local Garden cluster and remove the Docker containers
        # istio Kubernetes Gardener Bootstrapping Gardener #https://istio.io/docs/setup/platform-setup/gardener/
        #Install and configure kubectl https://kubernetes.io/docs/tasks/tools/install-kubectl/
        - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"
        - chmod +x ./kubectl #Make the kubectl binary executable
        - sudo mv ./kubectl /usr/local/bin/kubectl #Move the binary in to your PATH
        - kubectl version --client #Test to ensure the version you installed is up-to-date

matrix:
  fast_finish: true
  include:

      #https://docs.cilium.io/en/latest/gettingstarted/kind/
    # - name: "simulate Cluster Mesh in a sandbox cilium kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name=cluster1 --config=app/kind-cluster1.yaml
    #     - sudo kind create cluster --name=cluster2 --config=app/kind-cluster2.yaml
    #     - sudo make deploy-cluster-mesh
    #     # - sudo kind delete cluster --name cilium-testing
    #   after_success:
    #     - deactivate

      #https://docs.cilium.io/en/latest/gettingstarted/kind/
    # - name: "cilium hubble distributed kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --config=app/kind-config.yaml
    #     - sudo kubectl cluster-info --context kind-kind
    #     - sudo make deploy-cilium-hubble-dist
    #     # - sudo kind delete cluster --name cilium-testing
    #   after_success:
    #     - deactivate


    # - name: "ELK kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name tutorial-cluster
    #     - sudo kubectl config use-context kind-tutorial-cluster
    #     - sudo make deploy-elk
    #     - sudo kind delete cluster --name tutorial-cluster
    #   after_success:
    #     - deactivate


    # - name: "ELK kind wo snaps Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   # addons:
    #   #   snaps:
    #   #     - name: kubectl
    #   #       confinement: classic # or devmode
    #   #       channel: latest/stable # will be passed to --channel flag
    #   #     - name: helm
    #   #       confinement: classic # or devmode
    #   #       channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name tutorial-cluster
    #     - sudo kubectl config use-context kind-tutorial-cluster
    #     - sudo make provision-kubectl
    #     - sudo make provision-helm        
    #     - sudo make deploy-elk
    #     - sudo kind delete cluster --name tutorial-cluster
    #   after_success:
    #     - deactivate


    # - name: "EFK kind wo snaps Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   # addons:
    #   #   snaps:
    #   #     - name: kubectl
    #   #       confinement: classic # or devmode
    #   #       channel: latest/stable # will be passed to --channel flag
    #   #     - name: helm
    #   #       confinement: classic # or devmode
    #   #       channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name tutorial-cluster
    #     - sudo kubectl config use-context kind-tutorial-cluster
    #     - sudo make provision-kubectl
    #     - sudo make provision-helm        
    #     - sudo make deploy-efk
    #     - sudo kind delete cluster --name tutorial-cluster
    #   after_success:
    #     - deactivate

    # - name: "EFK kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name tutorial-cluster
    #     - sudo kubectl config use-context kind-tutorial-cluster
    #     - sudo make deploy-efk
    #     - sudo kind delete cluster --name tutorial-cluster
    #   after_success:
    #     - deactivate

    # - name: "microservices kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name tutorial-cluster
    #     - sudo kubectl config use-context kind-tutorial-cluster
    #     - sudo make deploy-microservices
    #     - sudo kind delete cluster --name tutorial-cluster
    #   after_success:
    #     - deactivate






    # - name: "istio service mesh kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --config=app/kind-config.yaml
    #     - sudo kubectl cluster-info --context kind-kind
    #     - sudo make deploy-istio
    #     # - sudo kind delete cluster --name cilium-testing
    #   after_success:
    #     - deactivate

    #MOVED
    # - name: "openfaas w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name openfaas-testing
    #     - sudo kubectl config use-context kind-openfaas-testing
    #     - sudo make deploy-openfaas
    #     - sudo kind delete cluster --name openfaas-testing
    #   after_success:
    #     - deactivate

    # - name: "kubesec w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: go
    #   # before_install:
    #   #   - pip3 install virtualenv
    #   #   - virtualenv -p $(which python3) ~venvpy3
    #   #   - source ~venvpy3/bin/activate
    #   #   - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name kubesec-testing
    #     - sudo kubectl config use-context kind-kubesec-testing
    #     - go version
    #     - go get -u github.com/controlplaneio/kubesec/cmd/kubesec
    #     - sudo make deploy-kubesec
    #     - sudo kind delete cluster --name kubesec-testing
    #   after_success:
    #     - deactivate

    - name: "voting-app  w snapped kubectl helm Python 3.7 on bionic amd64"
      dist: bionic
      arch: amd64
      addons:
        snaps:
          - name: kubectl
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
          - name: helm
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-kind
        - sudo kind create cluster --name tutorial-cluster
        - sudo kubectl config use-context kind-tutorial-cluster
        - sudo make deploy-chaosmesh
        - sudo kind delete cluster --name tutorial-cluster
      after_success:
        - deactivate

# ######################## TESTED OK STARTS #################################
    - name: "chaos mesh kind w snapped kubectl helm Python 3.7 on bionic amd64" #OK
      dist: bionic
      arch: amd64
      addons:
        snaps:
          - name: kubectl
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
          - name: helm
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-kind
        - sudo kind create cluster --name tutorial-cluster
        - sudo kubectl config use-context kind-tutorial-cluster
        - sudo make deploy-chaosmesh
        - sudo kind delete cluster --name tutorial-cluster
      after_success:
        - deactivate

    #
    #   #https://docs.cilium.io/en/latest/gettingstarted/kind/
    # - name: "cilium hubble local kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --config=app/kind-config.yaml
    #     - sudo kubectl cluster-info --context kind-kind
    #     - sudo make deploy-cilium-hubble-local
    #     # - sudo kind delete cluster --name cilium-testing
    #   after_success:
    #     - deactivate
    #
    #   #https://docs.cilium.io/en/latest/gettingstarted/kind/
    # - name: "cilium kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --config=app/kind-config.yaml
    #     - sudo kubectl cluster-info --context kind-kind
    #     - sudo make deploy-cilium
    #     # - sudo kind delete cluster --name cilium-testing
    #   after_success:
    #     - deactivate
    #

    # - name: "kubeflow kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   # <<: *fleet_install_tasks
    #   # <<: *fleet_script_tasks
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name kubeflow-testing
    #     - sudo kubectl config use-context kind-kubeflow-testing
    #     - sudo make deploy-kubeflow
    #     - sudo kind delete cluster --name kubeflow-testing
    #   after_success:
    #     - deactivate
    #
    # - name: "weavescope kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   # <<: *fleet_install_tasks
    #   # <<: *fleet_script_tasks
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name weavescope-testing
    #     - sudo kubectl config use-context kind-weavescope-testing
    #     - sudo make deploy-weavescope
    #     - sudo kind delete cluster --name weavescope-testing
    #   after_success:
    #     - deactivate
    #
    # - name: "kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   # <<: *fleet_install_tasks
    #   # <<: *fleet_script_tasks
    #   script:
    #     - sudo make deploy-kind
    #   after_success:
    #     - deactivate
    #
    # - name: "openesb kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name openesb-testing
    #     - sudo kubectl config use-context kind-openesb-testing
    #     - sudo make deploy-openesb
    #     - sudo kind delete cluster --name openesb-testing
    #   after_success:
    #     - deactivate
    #
    # - name: "k8s dashboard kind w snapped kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #       - name: helm
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   script:
    #     - sudo make deploy-kind
    #     - sudo kind create cluster --name dashboard-testing
    #     - sudo kubectl config use-context kind-dashboard-testing
    #     - sudo make deploy-dashboard
    #     - sudo kind delete cluster --name dashboard-testing
    #   after_success:
    #     - deactivate
# #########################################################
    # - name: "kind gardener  Python 3.7 on bionic"
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_dashboard_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "kind istio  Python 3.7 on bionic"
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_kind_istio_tasks
    #   after_success:
    #     - deactivate
    #
    #
    # - name: "kind  Python 3.7 on bionic"
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_kind_istio_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "kind gardener  Python 3.7 on xenial"
    #   dist: xenial
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_dashboard_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "kind  istio Python 3.7 on xenial"
    #   dist: xenial
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_kind_istio_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "kind  Python 3.7 on xenial"
    #   dist: xenial
    #   arch: amd64
    #   addons:
    #     snaps:
    #       - name: kubectl
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_dashboard_tasks
    #   after_success:
    #     - deactivate

    # - name: "Python 3.7 on bionic arm64" # package architecture (amd64) does not match system (arm64)
    #   os: linux
    #   arch: arm64
    #   dist: bionic
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_vagrant_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "Python 3.7 on bionic ppc64le" #Unable to locate package osquery
    #   os: linux
    #   arch: ppc64le
    #   dist: bionic
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_vagrant_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "Python 3.7 on bionic s390x" #Unable to locate package osquery
    #   os: linux
    #   arch: s390x
    #   dist: bionic
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_vagrant_tasks
    #   after_success:
    #     - deactivate


    # - name: "Python 2.7 on xenial amd64"
    #   dist: xenial
    #   language: python
    #   python: 2.7
    #   before_install:
    #     - pip install virtualenv
    #     - virtualenv -p $(which python2) ~venvpy2
    #     - source ~venvpy2/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #
    #   after_success:
    #     - deactivate

    # - name: "Python 3.7 on xenial arm64"
    #   os: linux
    #   arch: arm64
    #   dist: xenial
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_vagrant_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "Python 3.7 on xenial ppc64le" #Unable to locate package osquery
    #   os: linux
    #   arch: ppc64le
    #   dist: xenial
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_vagrant_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "Python 3.7 on xenial s390x" #Unable to locate package osquery
    #   os: linux
    #   arch: s390x
    #   dist: xenial
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_vagrant_tasks
    #   after_success:
    #     - deactivate




    # - name: "kind brew Python 2.7.17 on macOS xcode10.2"
    #   os: osx
    #   osx_image: xcode10.2
    #   language: shell
    #   before_install:
    #     - pip install virtualenv
    #     - virtualenv -p $(which python2) ~venvpy2
    #     - source ~venvpy2/bin/activate
    #     # Install kind via brew
    #     - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"  #Install brew
    #     - brew install kind
        # - kind create cluster # Default cluster context name is `kind`.
        # - kind create cluster --name kind-2
        # - kind get clusters # list kind clusters
        # - kubectl cluster-info --context kind-kind #In order to interact with a specific cluster, you only need to specify the cluster name as a context in kubectl
        # - kind load docker-image hello-world #Docker images can be loaded into your cluster nodes
        # # - kind load image-archive /my-image-archive.tar #image archives can be loaded
        # # custom DockerFile build workflow starts, don't use a :latest tag
        # # - docker build -t my-custom-image:unique-tag ./my-image-dir
        # # - kind load docker-image my-custom-image:unique-tag
        # # - kubectl apply -f my-manifest-using-my-image:unique-tag
        # # - docker exec -it my-node-name crictl images # get a list of images present on a cluster node,my-node-name is the name of the Docker container
        # # - kind build node-image --type bazel #by using docker or bazel. To specify the build type use the flag --type
        # # custom DockerFile build workflow ends
        # - kubectl cluster-info --context kind-kind-2
        # - kind load docker-image hello-world --name kind-2 #If using a named cluster you will need to specify the name of the cluster you wish to load the image into
        # - kind delete cluster #If the flag --name is not specified, kind uses the default cluster context name kind and deletes that cluster
        # - kind delete cluster --name kind-2
        # - kind get clusters # list kind clusters
      # <<: *fleet_install_tasks
      # <<: *fleet_script_tasks
      # after_success:
      #   - deactivate

    # - name: "gardener Python 2.7.17 on macOS xcode10.2"
    #   os: osx
    #   osx_image: xcode10.2
    #   language: shell
    #   before_install:
    #     - pip install virtualenv
    #     - virtualenv -p $(which python2) ~venvpy2
    #     - source ~venvpy2/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_gardener_macos_tasks
    #   after_success:
    #     - deactivate




    # - name: "Python 3.7.5 on macOS xcode10.2"
    #   os: osx
    #   osx_image: xcode10.2
    #   language: shell
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   after_success:
    #     - deactivate
    #
    # - name: "Python 3.7.5 on macOS xcode9.4 "
    #   os: osx
    #   osx_image: xcode9.4
    #   language: shell
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   after_success:
    #     - deactivate



    # - name: "kind chocolatey Python 3.8 on Windows"
    #   os: windows
    #   language: shell
    #   env:
    #     - PATH=/c/Python38:/c/Python38/Scripts:$PATH
    #   before_install:
    #     - choco install python --version 3.8.1
    #     - pip install virtualenv
    #     - virtualenv $HOME/venv
    #     - source $HOME/venv/Scripts/activate
    #     # Install kind via chocolatey
    #     # - Get-ExecutionPolicy #If it returns Restricted, then run Set-ExecutionPolicy AllSigned or Set-ExecutionPolicy Bypass -Scope Process.
    #     # - Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    #     - choco install kind
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   after_success:
    #     - deactivate

    # - name: "Python 3.7 on Windows"
    #   os: windows
    #   language: shell
    #   env: PATH=/c/Python37:/c/Python37/Scripts:$PATH
    #   before_install:
    #     - choco install python --version 3.7.3
    #     - python -m pip install virtualenv
    #     - virtualenv $HOME/venv
    #     - source $HOME/venv/Scripts/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   after_success:
    #     - deactivate
